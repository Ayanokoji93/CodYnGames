package Compiler;

import java.io.*;
import java.util.List;
import Compiler.factor.GeneralCompiler;

/**
 * The JavaFile class extends GeneralCompiler and provides methods to rename files,
 * write code to a file, compile, and execute Java code.
 */
public class JavaFile extends GeneralCompiler {
    private String fileName;

    /**
     * Constructor that initializes a temporary file with the ".java" extension.
     *
     * @throws IOException if an Input or Output error occurs.
     */
    public JavaFile() throws IOException {
        super(".java");
    }

    /**
     * Renames the temporary file using the specified fileName.
     *
     * @param code the Java code to analyze for the main class name.
     */
    public void renameFile(String code) {
        String className = extractClassName(code);
        this.fileName = className;
        File newFileName = new File(tempFile.getParent(), fileName + ".java");
        tempFile.renameTo(newFileName);
        this.tempFile = newFileName;
    }

    /**
     * Extracts the name of the public class from the provided Java code.
     *
     * @param code the Java code to analyze.
     * @return the name of the public class, or null if none is found.
     */
    private String extractClassName(String code) {
        for (String line : code.split("\\R")) {
            if (line.contains("public class")) {
                return line.split("\\s+")[2];
            }
        }
        return null;
    }

    /**
     * Deletes temporary files, including .class files, if any.
     */
    private void deleteTempFiles() {
        if (tempFile != null && tempFile.exists()) {
            tempFile.delete();
        }
        File classFile = new File(tempFile.getParent(), fileName + ".class");
        if (classFile.exists()) {
            classFile.delete();
        }
    }

    /**
     * Compiles and executes the provided Java code, passing a list of numbers as input.
     *
     * @param code the Java code to execute.
     * @param numbers the list of numbers to pass as input to the program.
     * @return the output of the executed program.
     * @throws IOException if an Input or Output error occurs.
     * @throws InterruptedException if the process execution is interrupted.
     */
    @Override
    public String execute(String code, List<Integer> numbers) throws IOException, InterruptedException {
        try {
            // Rename the temporary file
            renameFile(code);

            // Write the code in the temporary file
            writeResponseInFile(code);

            // Compile the code
            Process compilerProcess = Runtime.getRuntime().exec("javac " + getPathFile());
            compilerProcess.waitFor();

            // Display compilation errors
            try (BufferedReader errorReader = new BufferedReader(new InputStreamReader(compilerProcess.getErrorStream()))) {
                StringBuilder errorOutput = new StringBuilder();
                String line;
                while ((line = errorReader.readLine()) != null) {
                    errorOutput.append(line).append(System.lineSeparator());
                }
                if (errorOutput.length() > 0) {
                    throw new IOException("Compilation Error: " + errorOutput.toString());
                }
            }

            // Execute the compiled code using java
            Process execProcess = Runtime.getRuntime().exec("java -cp " + tempFile.getParent() + " " + fileName);

            // Provide input numbers to the executed program
            try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(execProcess.getOutputStream()))) {
                for (Integer number : numbers) {
                    writer.write(number.toString());
                    writer.newLine();
                }
            }

            // Read the output generated by the executed program
            StringBuilder output = new StringBuilder();
            try (BufferedReader reader = new BufferedReader(new InputStreamReader(execProcess.getInputStream()))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    output.append(line).append(System.lineSeparator());
                }
            }

            // Read error output from the executed program
            try (BufferedReader errorReader = new BufferedReader(new InputStreamReader(execProcess.getErrorStream()))) {
                StringBuilder errorOutput = new StringBuilder();
                String line;
                while ((line = errorReader.readLine()) != null) {
                    errorOutput.append(line).append(System.lineSeparator());
                }
                if (errorOutput.length() > 0) {
                    throw new IOException("Execution Error: " + errorOutput.toString());
                }
            }

            execProcess.waitFor();
            return output.toString();
        } catch (IOException | InterruptedException e) {
            throw e;
        } finally {

            deleteTempFiles();
        }
    }
}
